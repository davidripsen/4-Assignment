# Add colouring and change bins
library(RColorBrewer)
rf <- colorRampPalette(rev(brewer.pal(11,'Spectral')))
r <- rf(32)
(h2 <- p2 + stat_bin2d(bins=100) + scale_fill_gradientn(colours=r) + ggtitle(sprintf("Simulations with sigma = %.2f", 0.2)))
(h3 <- p3 + stat_bin2d(bins=100) + scale_fill_gradientn(colours=r) + ggtitle(sprintf("Simulations with sigma = %.2f", 0.3)))
(h4 <- p4 + stat_bin2d(bins=100) + scale_fill_gradientn(colours=r) + ggtitle(sprintf("Simulations with sigma = %.2f", 0.4)))
sim = data.frame(SDEsim(sigma=0.1))
# Ref: https://www.r-bloggers.com/2014/09/5-ways-to-do-2d-histograms-in-r/
#install.packages("ggplot2")
library(ggplot2)
# Default call (as object)
p <- ggplot(sim, aes(y1,y2))
# Add colouring and change bins
library(RColorBrewer)
rf <- colorRampPalette(rev(brewer.pal(11,'Spectral')))
r <- rf(32)
h3 <- p + stat_bin2d(bins=100) + scale_fill_gradientn(colours=r) + ggtitle(sprintf("Simulations with sigma = %.2f", 0.1))
h3
#install.packages("ctsmr", repo = "http://ctsm.info/repo/dev")
install.packages("pkgbuild")
install.packages("ctsmr", repo = "http://ctsm.info/repo/dev")
library(ctsmr)
library("ctsmr")
library('ctsmr')
library(splines)
library(ctsmr)
install.packages("ctsmr", repo = "http://ctsm.info/repo/dev")
install.packages("ctsmr", repo = "http://ctsm.info/repo/dev")
library(ctsmr)
library(splines)
source("CompEx3_E18/sdeTiTm.R")
# Load data
if (Sys.info()[7] == "davidipsen")
{path <- "~/Documents/DTU/3. Semester (MSc)/Advanced Time Series/Assignments/3-Assignment/CompEx3_E18/"
} else {path <- "CompEx3_E18/"}
load(paste0(path,"Exercise3.RData"))
AllDat
View(AllDat)
knitr::opts_chunk$set(cache = T) # Omg mega fedt for compile-tiden med cache=TRUE <3
# Load data
if (Sys.info()[7] == "davidipsen")
{path <- "~/Documents/DTU/3. Semester (MSc)/Advanced Time Series/Assignments/3-Assignment/CompEx3_E18/"
} else {path <- "CompEx3_E18/"}
load(paste0(path,"Exercise3.RData"))
D = AllDat
head(D)
tail(D)
D
plot(D)
plot(D$Gv)
plot(D$Gv, D$yTi1)
plot(D$Gv, D$Gv)
plot(D$Gv, D$yTi1)
plot(D$Ta * D$Gv, D$yTi1)
plot(bs[14:27,1]*fit2$xm[3]+bs[14:27,2]*fit2$xm[4]+bs[14:27,3]*fit2$xm[5]+bs[14:27,4]*fit2$xm[6]+bs[14:27,5]*fit2$xm[7],type='l')
library(splines)
load(paste0(path,"Exercise3.RData"))
AllDat
idx <- (Hour>8 & Hour < 23) # It is impossible to fit a window area for the hours without any sun, so we limit the window area estimation to the hours with sun.
Hour <- as.numeric(strftime(AllDat$date, format="%H"))
Pred <- predict(fit1)
plot(Pred[[1]]$state$pred$Ti - AllDat$yTi1 ~ Hour)
plot(AllDat$Gv ~ Hour)
idx <- (Hour>8 & Hour < 23) # It is impossible to fit a window area for the hours without any sun, so we limit the window area estimation to the hours with sun.
bs = bs(Hour[idx],df=5,intercept=TRUE) # Dvs. 4 knots / 5 basis splines
# What does the splines look like?
plot(bs[14:27,1],type='l')
bs = bs(Hour[idx],df=5,intercept=TRUE) # Dvs. 4 knots / 5 basis splines
# What does the splines look like?
plot(bs[14:27,1],type='l')
lines(bs[ 14:27,2])
lines(bs[ 14:27,3])
lines(bs[ 14:27,4])
lines(bs[ 14:27,5])
bs1 <- bs2 <- bs3 <- bs4 <- bs5 <- bs6 <- numeric(dim(AllDat)[1])
bs1[idx] = bs[,1]
bs2[idx] = bs[,2]
bs3[idx] = bs[,3]
bs4[idx] = bs[,4]
bs5[idx] = bs[,5]
AllDat$bs1 = bs1
AllDat$bs2 = bs2
AllDat$bs3 = bs3
AllDat$bs4 = bs4
AllDat$bs5 = bs5
idx <- (Hour>8 & Hour < 23) # It is impossible to fit a window area for the hours without any sun, so we limit the window area estimation to the hours with sun.
bs = bs(Hour[idx],df=5,intercept=TRUE) # Dvs. 4 knots / 5 basis splines
# What does the splines look like?
plot(bs[14:27,1],type='l')
lines(bs[ 14:27,2])
lines(bs[ 14:27,3])
lines(bs[ 14:27,4])
lines(bs[ 14:27,5])
bs
?bs
library(cstmr)
library('cstmr')
library('ctsmr')
if (Sys.info()[7] == "davidipsen"){
setwd("~/Documents/DTU/3. Semester (MSc)/Advanced Time Series/Assignments/4-Assignment")
} else if (Sys.info()[7] == "Hvad end Kaspers PC hedder-sikkert noget UNIX-hejs ^_^"){
}
D <- read.table("comp_ex_4_scripts_2011/data/cex4WindDataInterpolated.csv", sep=",",
header=TRUE, stringsAsFactors=FALSE)
D$t <- as.POSIXct(D$t, tz="UTC")
n = dim(D)[1]
D$p
hist(D$p)
max(D$p)
D$p
maximum(D$p)
na.max(D$p)
D$p
D$p>20
sum(D$p>20)
ctsm1 <- function(data){
# Generate a new object of class ctsm
model = ctsm()
# Add a system equation and thereby also a state
model$addSystem(dX ~ (phi*X + a1*Ws1)*dt + exp(p11)*dw1)
model$addSystem(dphi ~ 0 * dt + exp(p12)*dw2)
# Set the names of the inputs
model$addInput(W)
# Set the observation equation: Ti is the state, yTi is the measured output
model$addObs(p ~ X)
# Set the variance of the measurement error
model$setVariance(p ~ exp(e11))
##----------------------------------------------------------------
# Set the initial value (for the optimization) of the value of the state at the starting time point
model$setParameter(dX = c(init = 10, lb = 0, ub = 25))
model$setParameter(dPhi = c(init = 1, lb = -10, ub = 10))
##----------------------------------------------------------------
# Set the initial value for the optimization
#model$setParameter(Ci = c(init = 1, lb = 1E-5, ub = 1E5))
#model$setParameter(Cm = c(init = 1000, lb = 1E-5, ub = 1E5))
#model$setParameter(Ria = c(init = 20, lb = 1E-4, ub = 1E5))
#model$setParameter(Rim = c(init = 20, lb = 1E-4, ub = 1E5))
#model$setParameter(Aw = c(init = 6, lb = 1E-2, ub = 7.5+4.8+5))
model$setParameter(p11 = c(init = 1, lb = -30, ub = 10))
model$setParameter(p22 = c(init = 1, lb = -30, ub = 10))
model$setParameter(e11 = c(init = 1, lb = -50, ub = 10))
model$setParameter(a1 = c(init = 0.2, lb = -50, ub = 100))
#model$setParameter(a2 = c(init = 4, lb = -500, ub = 1000))
#model$setParameter(a3 = c(init = 4, lb = -500, ub = 1000))
#model$setParameter(a4 = c(init = 4, lb = -500, ub = 1000))
#model$setParameter(a5 = c(init = 4, lb = -500, ub = 1000))
##----------------------------------------------------------------
# Run the parameter optimization
fit = model$estimate(data,firstorder = TRUE)
return(fit)
}
ctsm1(D)
ctsm1 <- function(data){
# Generate a new object of class ctsm
model = ctsm()
# Add a system equation and thereby also a state
model$addSystem(dX ~ (phi*X + a1*Ws1)*dt + exp(p11)*dw1)
model$addSystem(dphi ~ 0 * dt + exp(p12)*dw2)
# Set the names of the inputs
model$addInput(Ws1)
# Set the observation equation: Ti is the state, yTi is the measured output
model$addObs(p ~ X)
# Set the variance of the measurement error
model$setVariance(p ~ exp(e11))
##----------------------------------------------------------------
# Set the initial value (for the optimization) of the value of the state at the starting time point
model$setParameter(dX = c(init = 10, lb = 0, ub = 25))
model$setParameter(dPhi = c(init = 1, lb = -10, ub = 10))
##----------------------------------------------------------------
# Set the initial value for the optimization
#model$setParameter(Ci = c(init = 1, lb = 1E-5, ub = 1E5))
#model$setParameter(Cm = c(init = 1000, lb = 1E-5, ub = 1E5))
#model$setParameter(Ria = c(init = 20, lb = 1E-4, ub = 1E5))
#model$setParameter(Rim = c(init = 20, lb = 1E-4, ub = 1E5))
#model$setParameter(Aw = c(init = 6, lb = 1E-2, ub = 7.5+4.8+5))
model$setParameter(p11 = c(init = 1, lb = -30, ub = 10))
model$setParameter(p22 = c(init = 1, lb = -30, ub = 10))
model$setParameter(e11 = c(init = 1, lb = -50, ub = 10))
model$setParameter(a1 = c(init = 0.2, lb = -50, ub = 100))
#model$setParameter(a2 = c(init = 4, lb = -500, ub = 1000))
#model$setParameter(a3 = c(init = 4, lb = -500, ub = 1000))
#model$setParameter(a4 = c(init = 4, lb = -500, ub = 1000))
#model$setParameter(a5 = c(init = 4, lb = -500, ub = 1000))
##----------------------------------------------------------------
# Run the parameter optimization
fit = model$estimate(data,firstorder = TRUE)
return(fit)
}
ctsm1(D)
Dsub = D[1:400,]
ctsm1(Dsub)
ctsm1 <- function(data){
# Generate a new object of class ctsm
model = ctsm()
# Add a system equation and thereby also a state
model$addSystem(dX ~ (phi*X + a1*Ws1)*dt + exp(p11)*dw1)
model$addSystem(dphi ~ 0 * dt + exp(p12)*dw2)
# Set the names of the inputs
model$addInput(Ws1)
# Set the observation equation: Ti is the state, yTi is the measured output
model$addObs(p ~ X)
# Set the variance of the measurement error
model$setVariance(p ~ exp(e11))
##----------------------------------------------------------------
# Set the initial value (for the optimization) of the value of the state at the starting time point
model$setParameter(dX = c(init = 10, lb = 0, ub = 25))
model$setParameter(dphi = c(init = 1, lb = -10, ub = 10))
##----------------------------------------------------------------
# Set the initial value for the optimization
#model$setParameter(Ci = c(init = 1, lb = 1E-5, ub = 1E5))
#model$setParameter(Cm = c(init = 1000, lb = 1E-5, ub = 1E5))
#model$setParameter(Ria = c(init = 20, lb = 1E-4, ub = 1E5))
#model$setParameter(Rim = c(init = 20, lb = 1E-4, ub = 1E5))
#model$setParameter(Aw = c(init = 6, lb = 1E-2, ub = 7.5+4.8+5))
model$setParameter(p11 = c(init = 1, lb = -30, ub = 10))
model$setParameter(p22 = c(init = 1, lb = -30, ub = 10))
model$setParameter(e11 = c(init = 1, lb = -50, ub = 10))
model$setParameter(a1 = c(init = 0.2, lb = -50, ub = 100))
#model$setParameter(a2 = c(init = 4, lb = -500, ub = 1000))
#model$setParameter(a3 = c(init = 4, lb = -500, ub = 1000))
#model$setParameter(a4 = c(init = 4, lb = -500, ub = 1000))
#model$setParameter(a5 = c(init = 4, lb = -500, ub = 1000))
##----------------------------------------------------------------
# Run the parameter optimization
fit = model$estimate(data,firstorder = TRUE)
return(fit)
}
Dsub = D[1:400,]
ctsm1(Dsub)
ctsm1 <- function(data){
# Generate a new object of class ctsm
model = ctsm()
# Add a system equation and thereby also a state
model$addSystem(dX ~ (phi*X + a1*Ws1)*dt + exp(p11)*dw1)
model$addSystem(dphi ~ 0 * dt + exp(p12)*dw2)
# Set the names of the inputs
model$addInput(Ws1)
# Set the observation equation: Ti is the state, yTi is the measured output
model$addObs(p ~ X)
# Set the variance of the measurement error
model$setVariance(p ~ exp(e11))
##----------------------------------------------------------------
# Set the initial value (for the optimization) of the value of the state at the starting time point
model$setParameter(dX = c(init = 10, lb = 0, ub = 25))
model$setParameter(dphi = c(init = 1, lb = -10, ub = 10))
##----------------------------------------------------------------
# Set the initial value for the optimization
#model$setParameter(Ci = c(init = 1, lb = 1E-5, ub = 1E5))
#model$setParameter(Cm = c(init = 1000, lb = 1E-5, ub = 1E5))
#model$setParameter(Ria = c(init = 20, lb = 1E-4, ub = 1E5))
#model$setParameter(Rim = c(init = 20, lb = 1E-4, ub = 1E5))
#model$setParameter(Aw = c(init = 6, lb = 1E-2, ub = 7.5+4.8+5))
model$setParameter(p11 = c(init = 1, lb = -30, ub = 10))
model$setParameter(p22 = c(init = 1, lb = -30, ub = 10))
model$setParameter(e11 = c(init = 1, lb = -50, ub = 10))
model$setParameter(a1 = c(init = 0.2, lb = -50, ub = 100))
#model$setParameter(a2 = c(init = 4, lb = -500, ub = 1000))
#model$setParameter(a3 = c(init = 4, lb = -500, ub = 1000))
#model$setParameter(a4 = c(init = 4, lb = -500, ub = 1000))
#model$setParameter(a5 = c(init = 4, lb = -500, ub = 1000))
##----------------------------------------------------------------
# Run the parameter optimization
fit = model$estimate(data,firstorder = TRUE)
return(fit)
}
Dsub = D[1:400,]
ctsm1(Dsub)
D$p
Dsub
max(Dsub)
max(Dsub$p)
Dsub = D[1:400,]
ctsm1(Dsub)
ctsm1 <- function(data){
# Generate a new object of class ctsm
model = ctsm()
# Add a system equation and thereby also a state
model$addSystem(dX ~ (phi*X + a1*Ws1)*dt + exp(p11)*dw1)
model$addSystem(dphi ~ 0 * dt + exp(p12)*dw2)
# Set the names of the inputs
model$addInput(Ws1)
# Set the observation equation: Ti is the state, yTi is the measured output
model$addObs(p ~ X)
# Set the variance of the measurement error
model$setVariance(p ~ exp(e11))
##----------------------------------------------------------------
# Set the initial value (for the optimization) of the value of the state at the starting time point
model$setParameter(dX = c(init = 10, lb = 0, ub = 25))
model$setParameter(dphi = c(init = 1, lb = -10, ub = 10))
##----------------------------------------------------------------
# Set the initial value for the optimization
#model$setParameter(Ci = c(init = 1, lb = 1E-5, ub = 1E5))
#model$setParameter(Cm = c(init = 1000, lb = 1E-5, ub = 1E5))
#model$setParameter(Ria = c(init = 20, lb = 1E-4, ub = 1E5))
#model$setParameter(Rim = c(init = 20, lb = 1E-4, ub = 1E5))
#model$setParameter(Aw = c(init = 6, lb = 1E-2, ub = 7.5+4.8+5))
model$setParameter(p11 = c(init = 1, lb = -30, ub = 10))
model$setParameter(p22 = c(init = 1, lb = -30, ub = 10))
model$setParameter(e11 = c(init = 1, lb = -50, ub = 10))
model$setParameter(a1 = c(init = 0.2, lb = -50, ub = 100))
#model$setParameter(a2 = c(init = 4, lb = -500, ub = 1000))
#model$setParameter(a3 = c(init = 4, lb = -500, ub = 1000))
#model$setParameter(a4 = c(init = 4, lb = -500, ub = 1000))
#model$setParameter(a5 = c(init = 4, lb = -500, ub = 1000))
##----------------------------------------------------------------
# Run the parameter optimization
fit = model$estimate(data,firstorder = TRUE)
return(fit)
}
Dsub = D[1:400,]
ctsm1(Dsub)
ctsm1(Dsub)
ctsm1 <- function(data){
# Generate a new object of class ctsm
model = ctsm()
# Add a system equation and thereby also a state
model$addSystem(dX ~ (phi*X + a1*Ws1)*dt + exp(p11)*dw1)
model$addSystem(dphi ~ 0 * dt + exp(p12)*dw2)
# Set the names of the inputs
model$addInput(Ws1)
# Set the observation equation: Ti is the state, yTi is the measured output
model$addObs(p ~ X)
# Set the variance of the measurement error
model$setVariance(p ~ exp(e11))
##----------------------------------------------------------------
# Set the initial value (for the optimization) of the value of the state at the starting time point
model$setParameter(X = c(init = 10, lb = 0, ub = 25))
model$setParameter(phi = c(init = 1, lb = -10, ub = 10))
##----------------------------------------------------------------
# Set the initial value for the optimization
#model$setParameter(Ci = c(init = 1, lb = 1E-5, ub = 1E5))
#model$setParameter(Cm = c(init = 1000, lb = 1E-5, ub = 1E5))
#model$setParameter(Ria = c(init = 20, lb = 1E-4, ub = 1E5))
#model$setParameter(Rim = c(init = 20, lb = 1E-4, ub = 1E5))
#model$setParameter(Aw = c(init = 6, lb = 1E-2, ub = 7.5+4.8+5))
model$setParameter(p11 = c(init = 1, lb = -30, ub = 10))
model$setParameter(p22 = c(init = 1, lb = -30, ub = 10))
model$setParameter(e11 = c(init = 1, lb = -50, ub = 10))
model$setParameter(a1 = c(init = 0.2, lb = -50, ub = 100))
#model$setParameter(a2 = c(init = 4, lb = -500, ub = 1000))
#model$setParameter(a3 = c(init = 4, lb = -500, ub = 1000))
#model$setParameter(a4 = c(init = 4, lb = -500, ub = 1000))
#model$setParameter(a5 = c(init = 4, lb = -500, ub = 1000))
##----------------------------------------------------------------
# Run the parameter optimization
fit = model$estimate(data,firstorder = TRUE)
return(fit)
}
Dsub = D[1:400,]
ctsm1(Dsub)
ctsm1 <- function(data){
# Generate a new object of class ctsm
model = ctsm()
# Add a system equation and thereby also a state
model$addSystem(dX ~ (phi*X + a1*Ws1)*dt + exp(p11)*dw1)
model$addSystem(dphi ~ 0 * dt + exp(p12)*dw2)
# Set the names of the inputs
model$addInput(Ws1)
# Set the observation equation: Ti is the state, yTi is the measured output
model$addObs(p ~ X)
# Set the variance of the measurement error
model$setVariance(p ~ exp(e11))
##----------------------------------------------------------------
# Set the initial value (for the optimization) of the value of the state at the starting time point
model$setParameter(X = c(init = 10, lb = 0, ub = 25))
model$setParameter(phi = c(init = 1, lb = -10, ub = 10))
##----------------------------------------------------------------
# Set the initial value for the optimization
#model$setParameter(Ci = c(init = 1, lb = 1E-5, ub = 1E5))
#model$setParameter(Cm = c(init = 1000, lb = 1E-5, ub = 1E5))
#model$setParameter(Ria = c(init = 20, lb = 1E-4, ub = 1E5))
#model$setParameter(Rim = c(init = 20, lb = 1E-4, ub = 1E5))
#model$setParameter(Aw = c(init = 6, lb = 1E-2, ub = 7.5+4.8+5))
model$setParameter(p11 = c(init = 1, lb = -30, ub = 10))
model$setParameter(p12 = c(init = 1, lb = -30, ub = 10))
model$setParameter(e11 = c(init = 1, lb = -50, ub = 10))
model$setParameter(a1 = c(init = 0.2, lb = -50, ub = 100))
#model$setParameter(a2 = c(init = 4, lb = -500, ub = 1000))
#model$setParameter(a3 = c(init = 4, lb = -500, ub = 1000))
#model$setParameter(a4 = c(init = 4, lb = -500, ub = 1000))
#model$setParameter(a5 = c(init = 4, lb = -500, ub = 1000))
##----------------------------------------------------------------
# Run the parameter optimization
fit = model$estimate(data,firstorder = TRUE)
return(fit)
}
Dsub = D[1:400,]
ctsm1(Dsub)
ctsm1 <- function(data){
# Generate a new object of class ctsm
model = ctsm()
# Add a system equation and thereby also a state
model$addSystem(dX ~ (phi*X)*dt + exp(p11)*dw1)
model$addSystem(dphi ~ 0 * dt + exp(p12)*dw2)
# Set the names of the inputs
model$addInput(Ws1)
# Set the observation equation: Ti is the state, yTi is the measured output
model$addObs(p ~ X)
# Set the variance of the measurement error
model$setVariance(p ~ exp(e11))
##----------------------------------------------------------------
# Set the initial value (for the optimization) of the value of the state at the starting time point
model$setParameter(X = c(init = 5, lb = 0, ub = 25))
model$setParameter(phi = c(init = 0, lb = -2, ub = 2))
##----------------------------------------------------------------
# Set the initial value for the optimization
#model$setParameter(Ci = c(init = 1, lb = 1E-5, ub = 1E5))
#model$setParameter(Cm = c(init = 1000, lb = 1E-5, ub = 1E5))
#model$setParameter(Ria = c(init = 20, lb = 1E-4, ub = 1E5))
#model$setParameter(Rim = c(init = 20, lb = 1E-4, ub = 1E5))
#model$setParameter(Aw = c(init = 6, lb = 1E-2, ub = 7.5+4.8+5))
model$setParameter(p11 = c(init = 1, lb = -30, ub = 10))
model$setParameter(p12 = c(init = 1, lb = -30, ub = 10))
model$setParameter(e11 = c(init = 1, lb = -50, ub = 10))
model$setParameter(a1 = c(init = 0.2, lb = -50, ub = 100))
#model$setParameter(a2 = c(init = 4, lb = -500, ub = 1000))
#model$setParameter(a3 = c(init = 4, lb = -500, ub = 1000))
#model$setParameter(a4 = c(init = 4, lb = -500, ub = 1000))
#model$setParameter(a5 = c(init = 4, lb = -500, ub = 1000))
##----------------------------------------------------------------
# Run the parameter optimization
fit = model$estimate(data,firstorder = TRUE)
return(fit)
}
Dsub = D[1:400,]
ctsm1(Dsub)
is.na(D$p)
is.na(D$p).sum()
sum(is.na(D$p))
sum(is.na(Dsub$p))
ctsm1 <- function(data){
# Generate a new object of class ctsm
model = ctsm()
# Add a system equation and thereby also a state
model$addSystem(dX ~ (phi*X)*dt + exp(p11)*dw1)
model$addSystem(dphi ~ 0 * dt + exp(p12)*dw2)
# Set the names of the inputs
model$addInput(Ws1)
# Set the observation equation:
model$addObs(p ~ X)
# Set the variance of the measurement error
model$setVariance(p ~ exp(e11))
##----------------------------------------------------------------
# Set the initial value (for the optimization) of the value of the state at the starting time point
model$setParameter(X = c(init = 5, lb = 0, ub = 25))
model$setParameter(phi = c(init = 0, lb = -2, ub = 2))
##----------------------------------------------------------------
# Set the initial value for the optimization
#model$setParameter(Ci = c(init = 1, lb = 1E-5, ub = 1E5))
#model$setParameter(Cm = c(init = 1000, lb = 1E-5, ub = 1E5))
#model$setParameter(Ria = c(init = 20, lb = 1E-4, ub = 1E5))
#model$setParameter(Rim = c(init = 20, lb = 1E-4, ub = 1E5))
#model$setParameter(Aw = c(init = 6, lb = 1E-2, ub = 7.5+4.8+5))
model$setParameter(p11 = c(init = 1, lb = -30, ub = 10))
model$setParameter(p12 = c(init = 1, lb = -30, ub = 10))
model$setParameter(e11 = c(init = 1, lb = -50, ub = 10))
model$setParameter(a1 = c(init = 0.2, lb = -50, ub = 100))
#model$setParameter(a2 = c(init = 4, lb = -500, ub = 1000))
#model$setParameter(a3 = c(init = 4, lb = -500, ub = 1000))
#model$setParameter(a4 = c(init = 4, lb = -500, ub = 1000))
#model$setParameter(a5 = c(init = 4, lb = -500, ub = 1000))
##----------------------------------------------------------------
# Run the parameter optimization
fit = model$estimate(data,firstorder = TRUE)
return(fit)
}
Dsub = D[1:400,]
ctsm1(Dsub)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(eval = TRUE)
# Load data
if (Sys.info()[7] == "davidipsen")
{path <- "~/Documents/DTU/3. Semester (MSc)/Advanced Time Series/Assignments/3-Assignment/CompEx3_E18/"
} else {path <- "CompEx3_E18/"}
load(paste0(path,"Exercise3.RData"))
########## Initial model ############
fit1 <- sdeTiTm(AllDat,AllDat$yTi1,AllDat$Ph1) # Original model
library(ctsmr)
library(splines)
source("CompEx3_E18/sdeTiTm.R")
# Load data
if (Sys.info()[7] == "davidipsen")
{path <- "~/Documents/DTU/3. Semester (MSc)/Advanced Time Series/Assignments/3-Assignment/CompEx3_E18/"
} else {path <- "CompEx3_E18/"}
load(paste0(path,"Exercise3.RData"))
########## Initial model ############
fit1 <- sdeTiTm(AllDat,AllDat$yTi1,AllDat$Ph1) # Original model
### IMPLEMENT THE MENTIONED MODEL ###
source(paste0(path,"sdeTiTmAv.R"))
fit2 <- sdeTiTmAv(AllDat,AllDat$yTi1,AllDat$Ph1)
summary(fit1,extended=TRUE)
Hour <- as.numeric(strftime(AllDat$date, format="%H"))
Pred <- predict(fit1)
Hour <- as.numeric(strftime(AllDat$date, format="%H"))
Pred <- predict(fit1)
idx <- (Hour>8 & Hour < 23) # It is impossible to fit a window area for the hours without any sun, so we limit the window area estimation to the hours with sun.
bs = bs(Hour[idx],df=5,intercept=TRUE) # Dvs. 4 knots / 5 basis splines
bs1 <- bs2 <- bs3 <- bs4 <- bs5 <- bs6 <- numeric(dim(AllDat)[1])
bs1[idx] = bs[,1]
bs2[idx] = bs[,2]
bs3[idx] = bs[,3]
bs4[idx] = bs[,4]
bs5[idx] = bs[,5]
AllDat$bs1 = bs1
AllDat$bs2 = bs2
AllDat$bs3 = bs3
AllDat$bs4 = bs4
AllDat$bs5 = bs5
### IMPLEMENT THE MENTIONED MODEL ###
source(paste0(path,"sdeTiTmAv.R"))
fit2 <- sdeTiTmAv(AllDat,AllDat$yTi1,AllDat$Ph1)
